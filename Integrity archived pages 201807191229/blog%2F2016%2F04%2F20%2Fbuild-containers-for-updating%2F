<!doctype html><html lang=en-us><head><meta charset=utf-8><meta name=robots content=all,follow><meta name=googlebot content=index,follow,snippet,archive><meta name=msvalidate.01 content=EA32A239CFAE49A6F4F75D17BFB27A34><meta name=viewport content="width=device-width,initial-scale=1"><title>Updating Your Application Using Docker Build Containers</title><meta name=author content><meta name=google-site-verification content=3unfuKVdv2W-5jUytj80UQA2kVe1cX3J37nsmUx9EQM><meta name=keywords content="monax,agreements network"><meta name=description content=Monax><meta name=generator content="Hugo 0.42"><link rel=stylesheet href=//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css><link rel=stylesheet href=//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css integrity=sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u crossorigin=anonymous><link href=https://monax.io/css/base.css rel=stylesheet id=theme-stylesheet><link href=https://monax.io/css/custom.css rel=stylesheet><link href=https://monax.io/css/animate.css rel=stylesheet><link href=https://monax.io/css/aos.css rel=stylesheet><link rel="shortcut icon" href=https://monax.io/img/favicon2.ico type=image/x-icon><link rel=apple-touch-icon href=https://monax.io/img/apple-touch-icon2.png><link rel=alternate href=https://monax.io/index.xml type=application/rss+xml title=Monax><meta property=og:title content="Monax Industries"><meta property=og:type content=website><meta property=og:url content=https://monax.io/blog/2016/04/20/build-containers-for-updating//><meta property=og:image content=https://monax.io/img/share-img.png><meta property=og:description content="Learn how to update you application using a docker build container, and test it with docker-machine"><style>.async-hide{opacity:0!important}</style><script>(function(a,s,y,n,c,h,i,d,e){s.className+=' '+y;h.start=1*new Date;h.end=i=function(){s.className=s.className.replace(RegExp(' ?'+y),'')};(a[n]=a[n]||[]).hide=h;setTimeout(function(){i();h.end=null},c);h.timeout=c;})(window,document.documentElement,'async-hide','dataLayer',4000,{'GTM-P9HW9W9':true});</script><script>!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t,e){var n=document.createElement("script");n.type="text/javascript";n.async=!0;n.src="https://analytics.monax.io/ajs-proxy.min.js";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(n,a);analytics._loadOptions=e};analytics.SNIPPET_VERSION="4.1.0";analytics.load("BhFrW02ipjQdSFBcANCmacfkzexYdTAt");analytics.page('Monax | Blog | Updating Your Application Using Docker Build Containers');}}();</script></head><link rel=stylesheet href="//fonts.googleapis.com/css?family=Montserrat:300,400,600" type=text/css media=all><link rel=stylesheet href="//fonts.googleapis.com/css?family=Source Code Pro" type=text/css media=all><style>body,p,a,.btn{font-family:montserrat}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{font-family:montserrat}code{font-family:source code pro}</style><body><div id=all class=single-post><header><div class=navbar-affixed-top data-spy=affix data-offset-top=200><div class="navbar navbar-default yamm" role=navigation id=navbar><div class=container><div class=navbar-header><a class="navbar-brand home" href=https://monax.io/><img src=https://monax.io/img/logo.png alt="Updating Your Application Using Docker Build Containers logo" class="hidden-xs hidden-sm">
<img src=https://monax.io/img/logo-small.png alt="Updating Your Application Using Docker Build Containers logo" class="visible-xs visible-sm">
<span class=sr-only>Updating Your Application Using Docker Build Containers -</span></a><div class=navbar-buttons><button type=button class="navbar-toggle btn-template-main" data-toggle=collapse data-target=#navigation>
<span class=sr-only></span><i class="fa fa-align-justify"></i></button></div></div><div class="navbar-collapse collapse" id=navigation><ul class="nav navbar-nav navbar-right"><li class=dropdown><a href=/features/>Features</a></li><li class=dropdown><a href=# class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Monax For <span class=caret></span></a><ul class=dropdown-menu><div class="dropdown-content visible-md-block visible-lg-block"><div class=row></div><div class=row><div class="col-md-6 hover-dip-opacity"><a href=/for/fleet-leasing/><div class=content-container><div class=range-left><h4>Fleet leasing</h4></div><p class=range-left>How Monax can power your fleet leases, simplify your business processes and drive new revenue streams</p></div></a></div><div class="col-md-6 hover-dip-opacity"><a href=/for/corporate-governance/><div class=content-container><div class=range-left><h4>Corporate Governance</h4></div><p class=range-left>How Monax can simplify and speed up your corporate governance, and give you full control over your agreements</p></div></a></div></div><div class=row><div class="col-md-6 hover-dip-opacity"><a href=/for/content-creators/><div class=content-container><div class=range-left><h4>Content Creators</h4></div><p class=range-left>How Monax can strengthen your brand, protect your IP and drive new revenue streams for your content</p></div></a></div><div class="col-md-6 hover-dip-opacity"><a href=/for/lawyers/><div class=content-container><div class=range-left><h4>Lawyers</h4></div><p class=range-left>How Monax can simplify your workflow and turn your knowledge into commoditisable legal products</p></div></a></div></div></div><li class="visible-xs-block visible-sm-block"><a href=/for/fleet-leasing/>Fleet leasing</a></li><li class="visible-xs-block visible-sm-block"><a href=/for/corporate-governance/>Corporate Governance</a></li><li class="visible-xs-block visible-sm-block"><a href=/for/content-creators/>Content Creators</a></li><li class="visible-xs-block visible-sm-block"><a href=/for/lawyers/>Lawyers</a></li></ul></li><li class=dropdown><a href=# class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false>Resources <span class=caret></span></a><ul class=dropdown-menu><div class="dropdown-content visible-md-block visible-lg-block"><div class=row></div><div class=row><div class="col-md-6 hover-dip-opacity"><a href=/blog/><div class=content-container><div class=range-left><h4>Blog</h4></div><p class=range-left>Discover our journey, how we think and the paradigm shift we see happening toward legal products.</p></div></a></div><div class="col-md-6 hover-dip-opacity"><a href=/learn/><div class=content-container><div class=range-left><h4>Explainers</h4></div><p class=range-left>Learn how Monax can help you streamline your business. Explore best practices for Monax tools and ask questions.</p></div></a></div></div></div><li class="visible-xs-block visible-sm-block"><a href=/blog/>Blog</a></li><li class="visible-xs-block visible-sm-block"><a href=/learn/>Explainers</a></li></ul></li><li class=dropdown><a href=/company/>Company</a></li><li class=dropdown><div class=nav-button-container><a id=nav-register href=https://beta.monax.io/register class="btn btn-primary nav-button">Request a demo</a></div></li><div class="clearfix visible-sm-block padding-bottom-xs"></div></ul></div></div></div></div><div id=dropdown-overlay></div></header><section class="section-top padding-top-md" style="background:url() right bottom no-repeat;background-size:520px"><div class=container><div class="row flex-grid-md"><div class="col-md-7 col-valign-center"><div class=range-left-md><h5 class=article-category style=margin-bottom:-10px>tutorials</h5></div><div class="range-left-md underline-sm"><h1>Updating Your Application Using Docker Build Containers</h1></div><p class="post-meta range-left-md"><i class="fa fa-user-o"></i>Monax<i class="fa fa-calendar"></i> 20 April, 2016</p><p class="lead range-left-md">Learn how to update you application using a docker build container, and test it with docker-machine</p></div></div></div></section><div id=content><div class=container><div class="row padding-bottom-xl"><div class="col-md-9 padding-bottom-lg" id=blog-post><div id=post-content class=range-left-md><div class=deprecation-warning><p>Note: since this blog post was written, we have changed our name to Monax Industries and will be changing the name of our product to &#39;Monax&#39; in early 2017. We have left these posts unedited for the purposes of historical record, as the software was named Eris at the time.</p></div><p>In the early days of <a href=https://github.com/monax/monax/>eris-cli</a>, before we distributed binaries and users had to build from source, I wanted a simple way to update the tool either to the latest version or a specific branch. The result was <code>eris update</code> which would update eris, by default, to master. A flag lets users pick a branch (provided it&rsquo;s on GitHub) and <code>eris update --branch=develop</code>, for example. Under-the-hood, it&rsquo;s a series of shelled out git commands plus <code>go install ./cmd/eris</code>. This feature is useful for quickly confirming bug fixes or having users test out a new feature, before merging to <code>develop</code>. It only works for source installations and require git and go locally. What about binary installations you ask?</p><p>Eventually we got our binaries sorted out but the <code>eris update</code> command still only worked for installations from source. Updating from a binary installation was implemented but the feature hadn&rsquo;t received much love; the latest release was pulled in as a tarball and unpacked, its binary replacing the old one. It was buggy, didn&rsquo;t always work, and the code was messy. Finally, a user who had used the <code>--branch</code> feature with a source installation also wanted it for updating binary installations.</p><p>I went about <a href=https://github.com/monax/monax/pull/617>refactoring this code</a> all while pondering how to update eris to a specific branch from a binary installation (i.e., without requiring git or go installed). Eventually, all the pieces I needed fell together. Here&rsquo;s how it happened with docker build containers:</p><h4 id=building-an-image>Building an Image</h4><p>The <a href=https://github.com/fsouza/go-dockerclient>go-dockerclient</a> shines here, as usual. All our docker wrappers are in <code>perform/perform.go</code></p><pre><code class=language-go>// DockerBuild will build an image with imageName
// and a Dockerfile passed in as strings, respectively
// Function is ~ to `docker build -t imageName .`
// where a Dockerfile is in the `pwd`
func DockerBuild(imageName, dockerfile string) error {
	// adapted from:
	// https://godoc.org/github.com/fsouza/go-dockerclient#Client.BuildImage
	t := time.Now()
	inputbuf := bytes.NewBuffer(nil)
	writer := os.Stdout
	tr := tar.NewWriter(inputbuf)
	sizeDockerfile := int64(len([]byte(dockerfile)))
	tr.WriteHeader(&amp;tar.Header{Name: &quot;Dockerfile&quot;, Size: sizeDockerfile, ModTime: t, AccessTime: t, ChangeTime: t})
	tr.Write([]byte(dockerfile))
	tr.Close()

	r, w := io.Pipe()
	imgOpts := docker.BuildImageOptions{
		Name: imageName,
		RmTmpContainer: true,
		InputStream: inputbuf,
		OutputStream: w,
		RawJSONStream: true,
	}

	ch := make(chan error, 1)
	go func() {
		defer w.Close()
		defer close(ch)

		if err := util.DockerClient.BuildImage(imgOpts); err != nil {
			ch &lt;- err
		}
	}()
	jsonmessage.DisplayJSONMessagesStream(r, writer, os.Stdout.Fd(), term.IsTerminal(os.Stdout.Fd()), nil)
	if err, ok := &lt;-ch; ok {
		// doesn't catch the build error; that's OK, it'll be displayed to user
		// from json stream &amp; the image will be checked by checkImageExists
		return util.DockerError(err)
	}

	ok, err := checkImageExists(imageName)
	if err != nil {
		return err
	}
	if !ok {
		return fmt.Errorf(&quot;Image does not exist. Something went wrong. Exiting&quot;)
	}

	return nil
}
</code></pre><p>The above function, when called, will build a docker image and output the build process to stdout. Let&rsquo;s look at the build options:</p><pre><code class=language-go>imgOpts := docker.BuildImageOptions{
	Name: imageName,
	RmTmpContainer: true,
	InputStream: inputbuf,
	OutputStream: w,
	RawJSONStream: true,
}
</code></pre><p>A few things to note. We name our image, and we remove temporary build containers to clean up. The Dockerfile is written to a tarball <code>tr.Write([]byte(dockerfile))</code> and passed in as a buffer to <code>InputStream: inputbuf</code>. Together (with the help of a channel), the <code>OutputStream</code> and <code>rawJSONStream</code> pipe the logs to stdout while the build is running.</p><p>After the build is complete, we check the presence of the named image. This is done because the build error is not caught (rather than, say, a docker client error).</p><p>The code to check that the image exists is straight-forward:</p><pre><code class=language-go>func checkImageExists(imageName string) (bool, error) {
	fail := false

	opts := docker.ListImagesOptions{
		Filter: imageName,
	}

	anImage, err := util.DockerClient.ListImages(opts)
	if err != nil {
		return fail, util.DockerError(err)
	}

	if len(anImage) != 1 {
		return fail, nil
	} else {
		return true, nil
	}

	return fail, nil
}
</code></pre><p>where <code>Filter : imageName</code> will list only the image specified, if it exists. If the build failed, the image won&rsquo;t exist and the array of images returned by <code>DockerClient.ListImages()</code> will be empty.</p><p>We&rsquo;re now in a position to build an image given a name and Dockerfile, and check that it does indeed exist after the build.</p><p>To see how to get there, we&rsquo;re going to start from the beginning of the <code>eris update</code> command (modified from <code>update/update.go</code> for simplicity).</p><pre><code class=language-go>func UpdateEris(do *definitions.Do) error {

	whichEris, binPath, err := GoOrBinary()
	if err != nil {
		return err
	}

	if whichEris == &quot;go&quot; {
		// ensure git and go are installed
		hasGit, hasGo := CheckGitAndGo(true, true)
		if !hasGit || !hasGo {
			return fmt.Errorf(&quot;either git or go is not installed. both are required for non-binary update&quot;)
		}

		log.WithField(&quot;branch&quot;, do.Branch).Warn(&quot;Building eris binary via go with:&quot;)
		if err := UpdateErisGo(do.Branch); err != nil {
			return err
		}

	} else if whichEris == &quot;binary&quot; {
		if err := UpdateErisViaBinary(do.Branch, binPath); err != nil {
			return err
		}

	} else {
		return fmt.Errorf(&quot;The marmots could not figure out how eris was installed. Exiting.&quot;)
	}
}
</code></pre><p>The command comes in via the do struct (see <code>definitions/do.go</code>) and everything else can be ignored except:</p><pre><code class=language-go>if err := UpdateErisViaBinary(do.Branch, binPath); err != nil {
	return err
}
</code></pre><p>Here, the specified branch (default master) is passed in and the binary path was got above from <code>GoOrBinary()</code>. The primary purpose of <code>UpdateErisBinary(branch, binPath)</code> is to call <code>BuildErisContainer(branch, binPath)</code> so let&rsquo;s take a look at that latter function (from <code>update/binary.go</code>):</p><pre><code class=language-go>// branch to update in build container
// binaryPath to replace with new binary
func BuildErisBinContainer(branch, binaryPath string) error {

	dockerfile := MakeDockerfile(branch)
	imageName := &quot;eris-binary-update:temporary-image&quot;
	serviceName := &quot;eris-binary-update-temporary-service&quot;
	if err := perform.DockerBuild(imageName, dockerfile); err != nil {
		return err
	}

	// new the service for which the image has just been built
	doNew := definitions.NowDo()
	doNew.Name = serviceName
	doNew.Operations.Args  = []string{imageName}
	if err := services.NewService(doNew); err != nil {
		return err
	}

	// start the service up: binary has already been built
	doUpdate := definitions.NowDo()
	doUpdate.Operations.Args = []string{serviceName}
	if err := services.StartService(doUpdate); err != nil {
		return nil
	}

	// copy (export) the binary from serviceName's data container
	// into the scratch path to be used later
	doCp := definitions.NowDo()
	doCp.Name = serviceName
	// where the binary will go (temporarily)
	newPath := filepath.Join(common.ScratchPath, &quot;bin&quot;)

	// $INSTALL_BASE/eris as set by the base image
	doCp.Source = &quot;/usr/local/bin/eris&quot;
	doCp.Destination = newPath
	doCp.Operations.SkipCheck = true

	if err := data.ExportData(doCp); err != nil {
		return err
	}

	// remove all trace of the service and its image
	doRm := definitions.NowDo()
	doRm.Operations.Args = []string{serviceName}
	doRm.RmD = true		// remove data container
	doRm.Volumes = true	// remove volumes
	doRm.Force = true	// remove by force (no pesky warnings)
	doRm.File = true	// remove the service defintion file
	doRm.RmImage = true	// remove the temporary image

	if err := services.RmService(doRm); err != nil {
		return err
	}

	// binaryPath comes in from function
	if err := ReplaceOldBinaryWithNew(binaryPath, filepath.Join(newPath, &quot;eris&quot;)); err != nil {
		return err
	}

	return nil
}
</code></pre><p>That&rsquo;s a hefty function. Let&rsquo;s break it down line by line:</p><pre><code class=language-go>dockerfile := MakeDockerfile(branch)
imageName := &quot;eris-binary-update:temporary-image&quot;
serviceName := &quot;eris-binary-update-temporary-service&quot;
if err := perform.DockerBuild(imageName, dockerfile); err != nil {
	return err
}
</code></pre><p>For now, ignore <code>MakeDockerfile()</code> and assume the Dockerfile looks like:</p><pre><code class=language-Dockerfile>FROM quay.io/eris/base

ENV NAME         eris-cli
ENV REPO	 eris-ltd/$NAME
ENV BRANCH       %s
ENV CLONE_PATH   $GOPATH/src/github.com/$REPO
ENV GO15VENDOREXPERIMENT 1

RUN mkdir --parents $CLONE_PATH

RUN git clone --quiet https://github.com/$REPO $CLONE_PATH
RUN cd $CLONE_PATH &amp;&amp; git checkout --quiet -b $BRANCH &amp;&amp; git pull --quiet origin $BRANCH
RUN cd $CLONE_PATH/cmd/eris &amp;&amp; go build -o $INSTALL_BASE/eris

CMD [&quot;/bin/bash&quot;]
</code></pre><p>whereby <code>%s</code> is the branch inserted in <code>MakeDockerfile()</code> and <code>$INSTALL_BASE</code> is <code>/usr/bin/local/</code> from the base image (<code>FROM quay.io/eris/base</code>). Now that we&rsquo;ve got a Dockerfile and an image name, it&rsquo;s time to build the image; <code>perform.DockerBuild()</code> will do its thing and output something along the lines of:</p><pre><code>Step 1 : FROM quay.io/eris/base
 ---&gt; 35b611e416c3
Step 2 : ENV NAME eris-cli
 ---&gt; Using cache
 ---&gt; cc13c53892f6
Step 3 : ENV REPO eris-ltd/$NAME
 ---&gt; Using cache
 ---&gt; 28fe09e32b27
Step 4 : ENV BRANCH anyBranchOnGitHub
 ---&gt; Running in 0ccb1aacf1b3
 ---&gt; 0d62f6d0e21d
Removing intermediate container 0ccb1aacf1b3
Step 5 : ENV CLONE_PATH $GOPATH/src/github.com/$REPO
 ---&gt; Running in 79ad3636a36e
 ---&gt; dd9fd1685386
Removing intermediate container 79ad3636a36e
Step 6 : ENV GO15VENDOREXPERIMENT 1
 ---&gt; Running in d725100d15cb
 ---&gt; dd82330c2c6f
Removing intermediate container d725100d15cb
Step 7 : RUN mkdir --parents $CLONE_PATH
 ---&gt; Running in 3bf3ea143b10
 ---&gt; 1dd50a55e4fe
Removing intermediate container 3bf3ea143b10
Step 8 : RUN git clone --quiet https://github.com/$REPO $CLONE_PATH
 ---&gt; Running in 202fe406a34b
 ---&gt; 5f3746274db1
Removing intermediate container 202fe406a34b
Step 9 : RUN cd $CLONE_PATH &amp;&amp; git checkout --quiet -b $BRANCH &amp;&amp; git pull --quiet origin $BRANCH
 ---&gt; Running in 26fc8d7a2042
 ---&gt; 76c986901cf2
Removing intermediate container 26fc8d7a2042
Step 10 : RUN cd $CLONE_PATH/cmd/eris &amp;&amp; go build -o $INSTALL_BASE/eris
 ---&gt; Running in b31f73abefc1
 ---&gt; 83a86896aded
Removing intermediate container b31f73abefc1
Step 11 : CMD /bin/bash
 ---&gt; Running in bc42bec216ad
 ---&gt; ecb3c836abe1
Removing intermediate container bc42bec216ad
Successfully built ecb3c836abe1
</code></pre><p>which is the output one would expect from running <code>docker build -t imageName .</code> with that Dockerfile in <code>pwd</code>. Now if you stopped there and ran <code>docker images</code>, you&rsquo;d see the new image: <code>eris-binary-update:temporary-image</code> listed. Next, we&rsquo;ll run this image with a data container and export the binary that is already in it.</p><h4 id=services-data-containers>Services &amp; Data Containers</h4><p>The following part may seem unncessary complex to the seasoned docker user, however, I opted to use our existing plumbing for simplicity in our codebase.</p><p>Recall the <code>BuildErisBinContainer()</code> function from above. The first part was to build an image that has a binary with a specific branch. Now, we&rsquo;ll need to run the container and copy out the binary. In eris land, running docker containers == starting services. First, we new a service with name and image:</p><pre><code class=language-go>// new the service for which the image has just been built
doNew := definitions.NowDo()
doNew.Name = serviceName
doNew.Operations.Args  = []string{imageName}
if err := services.NewService(doNew); err != nil {
	return err
}
</code></pre><p><strong>Note:</strong> the above is akin to running <code>eris services new serviceName imageName</code></p><p>This function will drop a service definition file at <code>~/.eris/services/eris-binary-update-temporary-service.toml</code> that contains, among other things, these lines:</p><pre><code class=language-toml>[service]
name = &quot;eris-binary-update-temporary-service&quot;
image = &quot;eris-binary-update:temporary-image&quot;
data_container = true
</code></pre><p>In eris land, service definition files specify, essentially, how to <code>docker run</code> a pre-existing image. Thus:</p><pre><code class=language-go>doUpdate := definitions.NowDo()
doUpdate.Operations.Args = []string{serviceName}
if err := services.StartService(doUpdate); err != nil {
	return nil
}
</code></pre><p>which <strong>note</strong> is akin to <code>eris services start serviceName</code> and will start the defined service (i.e., <code>docker run</code>). Note the line <code>data_container = true</code>. This means that, along with starting the container, a mounted data container is also created. It is important for the next step, a convenience wrapper around <code>docker cp</code>:</p><pre><code class=language-go>// copy (export) the binary from serviceName's data container
// into the scratch path to be used later
doCp := definitions.NowDo()
doCp.Name = serviceName
// where the binary will go (temporarily)
newPath := filepath.Join(common.ScratchPath, &quot;bin&quot;)

// $INSTALL_BASE/eris as set by the base image
doCp.Source = &quot;/usr/local/bin/eris&quot;
doCp.Destination = newPath

// to over-ride default path entry in data container
doCp.Operations.SkipCheck = true

// `docker cp` from container to host
if err := data.ExportData(doCp); err != nil {
	return err
}
</code></pre><p>This function will take the binary we have already created in the container and copy it to the host at <code>~/.eris/scratch/bin/eris</code>. It is roughly equivalent to <code>eris data export serviceName SRC DEST</code> but with some caveats that have to do with <code>do.Operations.SkipCheck</code>. Let&rsquo;s not worry about that for now.</p><p>Finally, we remove all trace of the service:</p><pre><code class=language-go>doRm := definitions.NowDo()
doRm.Operations.Args = []string{serviceName}
doRm.RmD = true		// remove data container
doRm.Volumes = true	// remove volumes
doRm.Force = true	// remove by force (no pesky warnings)
doRm.File = true	// remove the service defintion file
doRm.RmImage = true	// remove the temporary image

if err := services.RmService(doRm); err != nil {
	return err
}
</code></pre><p>Last but not least, we&rsquo;ll need to delete the old binary and replace it with the new one; the last function called in <code>BuildErisBinContainer()</code> is:</p><pre><code class=language-go>// takes a new binary and replaces the old one
// prompts windows users to do manually
func ReplaceOldBinaryWithNew(oldPath, newPath string) error {

	platform := runtime.GOOS
	if platform != &quot;windows&quot; {
		if err := os.Remove(oldPath); err != nil {
			return err
		}

		if err := os.Rename(newPath, oldPath); err != nil {
			return err
		}

		chmodArgs := []string{&quot;+x&quot;, oldPath}
		stdOut, err := exec.Command(&quot;chmod&quot;, chmodArgs...).CombinedOutput()
		if err != nil {
			return fmt.Errorf(string(stdOut))
		}

	} else {
		cpString := fmt.Sprintf(&quot;%s %s&quot;, newPath, oldPath)
		log.Warn(`
To complete the update on Windows, run:
del /f ` + oldPath + `
ren ` + cpString + `
`)
	}
	return nil
}
</code></pre><p>which does exactly what we want it to (except maybe on windows :(). Awesome! But wait. How do you test that <code>eris update</code> works via a binary installation? After all we&rsquo;ve been developing in go&hellip;</p><h4 id=docker-machine-wizardy>Docker-Machine Wizardy</h4><p>It&rsquo;s no secret; we love all things docker. Especially docker-machine though. Having only used it for a few things (<a href=/docs/deprecated>see our docker-machine tutorial</a>, I forgot about its handy <code>ssh/scp</code> commands. Testing that a binary installation could update itself while developing in go proved somewhat incovenient and I had a convoluted process that was wearing my patience thin (nor did I want to be moving things around in <code>/usr/bin</code> on my local machine).</p><p>The solution: <code>scp</code> the binary from every <code>go install</code> into <code>/usr/bin</code> on a docker-machine. Assume the machine <code>dev-testing</code> has already been created.</p><p>After writing some code and running <code>go install ./cmd/eris</code> the go binary is located at <code>which eris</code>.</p><p>So:</p><pre><code class=language-bash>docker-machine scp $(which eris) dev-testing:/usr/bin
docker-machine ssh dev-testing
</code></pre><p>where the first line will copy the binary just created and put it in the binary path on that docker-machine and the second line will drop you into the docker-machine.</p><p>At this point, you can type <code>eris</code> and be off to the races. However, the goal here is rapid development of the <code>eris update</code> command. Because the command will now detect a binary installation (rather than go), we can test it easily in a fresh environment without mucking about on a host machine that is using go for development. There was also no need to worry about installing docker and if you break anything on that machine it can easily be destroyed and a new one created.</p><p>After playing around with the command, seeing that it worked (or didn&rsquo;t!) and checking its log outputs, it was simply a matter of (while still ssh&rsquo;ed in dev-testing):</p><pre><code class=language-bash>rm /usr/bin/eris
exit
</code></pre><p>And I&rsquo;m back on the host ready for another round of writing code, compiling via go &amp; testing it on the docker-machine.</p></div></div><div class=col-md-3><div class="panel panel-default sidebar-menu"><div class=range-left-md><h5></h5></div><div class=panel-body><form action=//google.com/search method=get accept-charset=utf-8 role=search><div class=input-group><input type=search name=q class=form-control placeholder>
<input type=hidden name=sitesearch value=https://monax.io/>
<span class=input-group-btn><button type=submit class="btn btn-template-main"><i class="fa fa-search"></i></button></span></div></form></div></div><div class="panel panel-default sidebar-menu"><div class=range-left-md><h5></h5></div><div class=panel-body><ul class=category-cloud><li><a href=https://monax.io/categories/announcements><i class="fa fa-bookmark"></i>announcements (13)</a></li><li><a href=https://monax.io/categories/blockchains><i class="fa fa-bookmark"></i>blockchains (6)</a></li><li><a href=https://monax.io/categories/distributed-business><i class="fa fa-bookmark"></i>distributed-business (7)</a></li><li><a href=https://monax.io/categories/eris><i class="fa fa-bookmark"></i>eris (4)</a></li><li><a href=https://monax.io/categories/hiring><i class="fa fa-bookmark"></i>hiring (4)</a></li><li><a href=https://monax.io/categories/learn><i class="fa fa-bookmark"></i>learn (7)</a></li><li><a href=https://monax.io/categories/legal-tech><i class="fa fa-bookmark"></i>legal-tech (4)</a></li><li><a href=https://monax.io/categories/press><i class="fa fa-bookmark"></i>press (13)</a></li><li><a href=https://monax.io/categories/products><i class="fa fa-bookmark"></i>products (30)</a></li><li><a href=https://monax.io/categories/releases><i class="fa fa-bookmark"></i>releases (4)</a></li><li><a href=https://monax.io/categories/tutorials><i class="fa fa-bookmark"></i>tutorials (15)</a></li></ul></div></div><div class="panel panel-default sidebar-menu"><div class=range-left-md><h5></h5></div><div class=panel-body><ul class=category-cloud><li><a href=https://monax.io/tags/agreements-network><i class="fa fa-tags"></i>agreements-network (5)</a></li><li><a href=https://monax.io/tags/announcements><i class="fa fa-tags"></i>announcements (4)</a></li><li><a href=https://monax.io/tags/awesome><i class="fa fa-tags"></i>awesome (4)</a></li><li><a href=https://monax.io/tags/blockchain><i class="fa fa-tags"></i>blockchain (12)</a></li><li><a href=https://monax.io/tags/blockchains><i class="fa fa-tags"></i>blockchains (13)</a></li><li><a href=https://monax.io/tags/cli><i class="fa fa-tags"></i>cli (4)</a></li><li><a href=https://monax.io/tags/command-line><i class="fa fa-tags"></i>command-line (4)</a></li><li><a href=https://monax.io/tags/decerver><i class="fa fa-tags"></i>decerver (27)</a></li><li><a href=https://monax.io/tags/engineering><i class="fa fa-tags"></i>engineering (4)</a></li><li><a href=https://monax.io/tags/epm><i class="fa fa-tags"></i>epm (4)</a></li><li><a href=https://monax.io/tags/eris><i class="fa fa-tags"></i>eris (55)</a></li><li><a href=https://monax.io/tags/erisdb><i class="fa fa-tags"></i>erisdb (12)</a></li><li><a href=https://monax.io/tags/erisserver><i class="fa fa-tags"></i>erisserver (11)</a></li><li><a href=https://monax.io/tags/hiring><i class="fa fa-tags"></i>hiring (4)</a></li><li><a href=https://monax.io/tags/monax><i class="fa fa-tags"></i>monax (7)</a></li><li><a href=https://monax.io/tags/smart-contracts><i class="fa fa-tags"></i>smart-contracts (10)</a></li><li><a href=https://monax.io/tags/tendermint><i class="fa fa-tags"></i>tendermint (4)</a></li><li><a href=https://monax.io/tags/thelonious><i class="fa fa-tags"></i>thelonious (29)</a></li></ul></div></div></div></div></div></div><section class="section-cta section-padding-xl background-dark"><div class=container><div class="row flex-grid-md"><div class=col-md-12><div class=underline-sm><h2>Find your first-class agreement now</h2></div><div class="form-container padding-bottom-md"><form id=main-cta-section class=form-main-cta><div class="content-container padding-bottom-sm"><p>I'm working in the
<span class=label-container><label for=userIndustry class=select-wrap><select id=userIndustry name=industry class="form-control resizeselect">
<option selected>Advertising Industry</option>
<option>Aerospace industry</option>
<option>Agriculture industry</option>
<option>Chemical industry</option>
<option>Construction industry</option>
<option>Defense industry</option>
<option>Education industry</option>
<option>Energy industry</option>
<option>Entertainment industry</option>
<option>Financial services industry</option>
<option>Food industry</option>
<option>Health care industry</option>
<option>Hospitality industry</option>
<option>Information industry</option>
<option>Legal services industry</option>
<option>Manufacturing industry</option>
<option>Media industry</option>
<option>Mining industry</option>
<option>Other industry</option>
<option>Public utilities industry</option>
<option>Real estate industry</option>
<option>Software industry</option>
<option>Technology industry</option>
<option>Telecommunications industry</option>
<option>Transport industry</option>
<option>Water industry</option></select></label></span></p><p>and we need to make
<span class=label-container><label for=userAgreementsType class=select-wrap><select id=userAgreementsType name=agreementsType class="form-control resizeselect">
<option selected>Collaborative Research Agreements</option>
<option>Consortium Agreements</option>
<option>Interagency Cooperation Contracts</option>
<option>Material Transfer Agreements</option>
<option>Memorandum of Understandings</option>
<option>Multiple Agreement Types</option>
<option>Non-Disclosure Agreements</option>
<option>Sponsored Research Agreements</option>
<option>Subaward Agreements</option>
<option>Teaming Agreements</option></select></label></span></p><p>typically
<span class=label-container><label for=userFrequency class=select-wrap><select id=userFrequency name=frequency class="form-control resizeselect">
<option>Every day</option>
<option selected>A few times each week</option>
<option>A few times each month</option>
<option>A few times each year</option>
<option>Ocassionally</option></select></label></span></p></div><div class=btn-container><button type=submit class="btn btn-primary btn-xl" role=button>Request a demo</button></div></form></div></div></div></div></section><footer id=footer class=section-footer><div class=container><div class=row><div class="col-md-3 col-sm-6"><div class="content-container padding-bottom-sm padding-top-xs"><a href><img id=footer-logo class="img-responsive img-left-sm" src=/img/Monax_logo_white.png alt></a></div><p class=range-left-sm>Deploy smart, legally-binding contracts on the blockchain.<br><a href=# id=request-demo-footer>Request a demo</a></p><div class="ul-left-sm flex-grid-sm btn-container range-left-md"><ul class="ul-round-icons ul-footer-icons"><a href=https://www.facebook.com/monaxHQ target=_blank><li><i class="fa fa-facebook"></i></li></a><a href=https://twitter.com/monaxHQ target=_blank><li><i class="fa fa-twitter"></i></li></a><a href=https://www.linkedin.com/company/monax/ target=_blank><li><i class="fa fa-linkedin"></i></li></a><a href=https://www.instagram.com/monaxHQ target=_blank><li><i class="fa fa-instagram"></i></li></a><a href="/cdn-cgi/l/email-protection#c5a6aaabb1a4a6b185a8aaaba4bdebacaa" target=_blank><li><i class="fa fa-envelope"></i></li></a><a href=https://github.com/monax target=_blank><li><i class="fa fa-github"></i></li></a></ul></div><hr class="hidden-md hidden-lg hidden-sm"></div><div class="col-md-3 col-sm-6"><div class=range-left-sm><h4>Subscribe To Updates</h4></div><p class=range-left-sm>Be the first to hear about all things Monax</p><div class="signup-container signup-footer"><form action=https://analytics.monax.io/monaxioregistry id=footer-newsletter-form class="col-valign-center flex-grid"><input type=text name=source value="footer signup" class=hidden>
<input type=text name=fname value=Anonymous class=hidden>
<input type=text name=lname value=User class=hidden>
<input type=text name=subscribe_only value=true class=hidden>
<input type=text placeholder=Email name=email type=email class=field-email required>
<button type=submit value=Submit class="btn field-submit">
<span>Suscribe to updates</span></button></form></div><hr class="hidden-md hidden-lg hidden-sm"></div><div class="clearfix visible-sm-block padding-bottom-md"></div><div class="col-md-3 col-sm-6"><div class=range-left-sm><h4>Developers</h4></div><p class=range-left-sm>Find all the resources you need as a developer.<br><br><a href="/cdn-cgi/l/email-protection#65060a0b1104061125080a0b041d4b0c0a" target=_blank>Contact us about 3rd party integrations &rsaquo;</a></p><hr class="hidden-md hidden-lg hidden-sm"></div><div class="col-md-3 col-sm-6"><div class=range-left-sm><h4>Press &amp; Events</h4></div><p class=range-left-sm>Monax are always happy to talk to the press. For current press releases <a href=/categories/press/>have a look here</a>.<br><br>Talk to us! <a href="/cdn-cgi/l/email-protection#bececcdbcdcdfed3d1d0dfc690d7d1" target=_blank><span class="__cf_email__" data-cfemail="f08082958383b09d9f9e9188de999f">[email&#160;protected]</span></a> for all things press-related.</p><hr class="hidden-md hidden-lg hidden-sm"></div></div></div></footer><div id=copyright><div class=container><div class=col-md-12><p class=pull-left><span><strong>&copy; Monax Industries. All rights reserved.</strong> US registered company: 132978319257.</span>
<span>&nbsp;&nbsp;|&nbsp;&nbsp;<a href=/legal/privacy-policy/>Privacy Policy</a></span></p><p class=pull-right>With thanks to <a href=http://bootstrapious.com/free-templates>Bootstrapious</a>.</p></div></div></div></div><script data-cfasync="false" src="/cdn-cgi/scripts/f2bf09f8/cloudflare-static/email-decode.min.js"></script><script src=//code.jquery.com/jquery-3.1.1.min.js integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin=anonymous></script><script src=//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js integrity=sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa crossorigin=anonymous></script><script src=//cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js></script><script src=https://monax.io/js/front.js></script><script src=https://monax.io/js/validate.jquery.js></script><script async src=https://monax.io/js/custom.js></script><script src=https://monax.io/js/aos.js></script><script async type=text/javascript>AOS.init({offset:200,duration:300,easing:'ease-in-sine',delay:50,once:true,anchorPlacement:'top-center'});</script><script async src=https://monax.io/js/tilt.jquery.js></script><script src=https://monax.io/js/scrollgress.jquery.js></script><script async type=text/javascript>$('#post-content').scrollgress({height:'5px',color:'#98b762',success:function(){console.log('Scrollgress has been initiated.');}});</script><script async src type=text/javascript></script></body></html>
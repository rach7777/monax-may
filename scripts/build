#!/usr/bin/env bash
#
# -------------------------------------------------------------
# Usage
# -------------------------------------------------------------
#
# (repo_root)> scripts/build [production|buildr] [buildr]
#
# -------------------------------------------------------------
# What It Does
# -------------------------------------------------------------
#
# Builds the monax site into two separate images. The first image
# is the site_buildr image which is the template for the site
# building. The site_buildr image locks down npm dependencies
# and installs the appropriate software via apk onto the
# primary build image used by the platform team. The second image
# is the site image which runs gulp build with either a
# --staging flag or a --production flag.
#
# Note this file is to be used for local development and on
# jenkins.
#
# See dockerfiles and gulpfile.js for specifics.

if [ "$1" == "production" ]
then
  site=production
else
  site=staging
fi

if $CI; then
  echo
  echo "### Pulling image from repository"
  docker pull $DOCKER_BUILDER_IMAGE #1>/dev/null
  docker tag $DOCKER_BUILDER_IMAGE site_buildr #1>/dev/null
fi

if [[ "$1" == "buildr" || "$2" == "buildr" || `docker images site_buildr -q` == "" ]]; then
  echo
  echo "### Building the site_buildr image"
  set -e
  docker build -t $DOCKER_BUILDER_IMAGE . #1>/dev/null
  set +e
  echo
  echo "### Pushing images to registry.code.monax.io"
  docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.code.monax.io
  docker push $DOCKER_BUILDER_IMAGE
  echo
  echo "### Not building the site image"
else
  echo
  echo "### Building the site image"
  set -e
  docker build -t $DOCKER_BUILD_IMAGE-$CI_BUILD_REF_NAME -f "Dockerfile.$site" . #1>/dev/null
  set +e
  echo
  echo "### Pushing images to registry.code.monax.io"
  docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.code.monax.io
  docker push "$DOCKER_BUILD_IMAGE-$CI_BUILD_REF_NAME"
fi

echo
echo "### Build script finished"
